# 配置ds0 和ds1两个数据源
spring.shardingsphere.datasource.names=ds0,ds1,ds2

#ds0 配置
spring.shardingsphere.datasource.ds0.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.ds0.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.ds0.jdbc-url=jdbc:mysql://123.57.93.65:3306/bill_1?serverTimezone=UTC&useSSL=false&useUnicode=true&characterEncoding=UTF-8
spring.shardingsphere.datasource.ds0.username=root
spring.shardingsphere.datasource.ds0.password=xxxxxx
#ds1 配置
spring.shardingsphere.datasource.ds1.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.ds1.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.ds1.jdbc-url=jdbc:mysql://123.57.93.65:3306/bill_2?serverTimezone=UTC&useSSL=false&useUnicode=true&characterEncoding=UTF-8
spring.shardingsphere.datasource.ds1.username=root
spring.shardingsphere.datasource.ds1.password=xxxxxx
#ds2
spring.shardingsphere.datasource.ds2.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.ds2.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.ds2.jdbc-url=jdbc:mysql://123.57.93.65:3306/bill_3?serverTimezone=UTC&useSSL=false&useUnicode=true&characterEncoding=UTF-8
spring.shardingsphere.datasource.ds2.username=root
spring.shardingsphere.datasource.ds2.password=xxxxxx

# 分库策略 根据id取模确定数据进哪个数据库
#spring.shardingsphere.sharding.default-database-strategy.inline.sharding-column=user_id
#spring.shardingsphere.sharding.default-database-strategy.inline.algorithm-expression=ds$->{user_id % 2}

#spring.shardingsphere.sharding.default-database-strategy.standard.sharding-column=user_id
#spring.shardingsphere.sharding.default-database-strategy.standard.range-algorithm-class-name=com.geekq.highimporttry.service.algorithm.IdRangeSharingAlgorithm

spring.shardingsphere.sharding.default-database-strategy.hint.algorithm-class-name=com.geekq.highimporttry.service.algorithm.IdSharingAlgorithm
#
#
#spring.shardingsphere.sharding.binding-tables=t_order,t_order_item
#spring.shardingsphere.sharding.broadcast-tables=t_address
#
## t_order表策略
#spring.shardingsphere.sharding.default-table-strategy.standard=
#spring.shardingsphere.sharding.default-table-strategy.hint.algorithm-class-name=com.geekq.highimporttry.service.algorithm.IdTableSharingAlgorithm
#
spring.shardingsphere.sharding.tables.import_point_202003.actual-data-nodes=ds$->{0..1}.import_point_$->{1..5}
spring.shardingsphere.sharding.tables.import_point_202003.table-strategy.standard.sharding-column = id
spring.shardingsphere.sharding.tables.import_point_202003.table-strategy.standard.precise-algorithm-class-name =com.geekq.highimporttry.service.algorithm.IdTableSharingAlgorithm
## 使用SNOWFLAKE算法生成主键
#spring.shardingsphere.sharding.tables.import_point.key-generator.column=order_id
#spring.shardingsphere.sharding.tables.import_point.key-generator.type=SNOWFLAKE
#spring.shardingsphere.sharding.tables.import_point.key-generator.props.worker.id=123


# t_order_item表策略
#spring.shardingsphere.sharding.tables.import_point_202003.actual-data-nodes=ds$->{0..1}.t_order_item
## 使用SNOWFLAKE算法生成主键
#spring.shardingsphere.sharding.tables.import_point_202003.key-generator.column=order_item_id
#spring.shardingsphere.sharding.tables.import_point_202003.key-generator.type=SNOWFLAKE
#spring.shardingsphere.sharding.tables.t_order_item.key-generator.props.worker.id=123
#
